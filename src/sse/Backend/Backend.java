/*******************************************************************************
 * Copyright (c) 2011-2013 Jochen Rill.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Jochen Rill - initial API and implementation
 ******************************************************************************/
package sse.Backend;

import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;

import sse.IOHandler.BinaryOut;
import sse.IOHandler.SecurityEngine;

public interface Backend {

	/**
	 * This method opens a new file and returns the new output stream. It has to
	 * close the previous stream.
	 * 
	 * @param currentBlock
	 *            : the current block the writer is writing to
	 * @param w
	 *            the current output stream
	 * @param secEngine
	 *            the current encryption engine
	 * @return the new output stream
	 */
	public BinaryOut openNextFile(int currentBlock,int nextBlock, BinaryOut w,
			SecurityEngine secEngine);

	/**
	 * This method deletes any unneeded files and closes all streams.
	 * 
	 * @param currentBlock
	 *            : the current block
	 * @param w
	 *            : the current output stream
	 * @param secEngine
	 *            : the current security engine
	 */
	public void finalize(long currentBlock, BinaryOut w,
			SecurityEngine secEngine);

	/**
	 * This method opens the next file for searching and returns whether we have
	 * reached an end or not. It also has to save the new stream in a manner
	 * that getStream() can return it.
	 * 
	 * @param block
	 *            : the block to open
	 * @param fileName
	 *            : the file to open
	 * @param position
	 *            : the position to jump to
	 * @param oldBlock
	 *            : the old block to delete
	 * @param stream
	 *            : the current stream
	 * @param sEn
	 *            : the current security engine
	 * @return whether the end is reached or not
	 * @throws IOException
	 */
	public boolean searchNext(long block, String fileName, long position,
			long oldBlock, RandomAccessFile stream, SecurityEngine sEn)
			throws IOException;

	/**
	 * This method returns the new stream generated by searchNext();
	 * 
	 * @return new stream to read from
	 */
	public RandomAccessFile getStream();

	/**
	 * This method returns a stream to the block containing the meta
	 * information.
	 * 
	 * @return a stream to the first block.
	 */
	public InputStream loadStartBlock();

	/**
	 * This method loads a random block file and deletes it again.
	 * 
	 * @param numberOfBlocks
	 *            : the total number of blocks available
	 * @param sEn
	 *            : the SecurityEngine used to decrypt the block and write it to
	 *            the harddisk
	 */
	public void loadRandomBlock(int numberOfBlocks, SecurityEngine sEn);

}
